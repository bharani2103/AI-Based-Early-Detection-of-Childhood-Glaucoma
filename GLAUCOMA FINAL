{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM9q9y1ggiMwlIoqwvV1sZN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"OvvyGnXmJB-w"},"outputs":[],"source":["# Install dependencies (if not already installed)\n","!pip install tensorflow opencv-python pillow --quiet\n","\n","import numpy as np\n","import cv2\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n","from google.colab import files\n","from PIL import Image\n","\n","# -------------------------------\n","# Step 1: Define the model\n","# -------------------------------\n","def build_model():\n","    model = Sequential([\n","        Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n","        MaxPooling2D(2, 2),\n","        Conv2D(64, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2),\n","        Conv2D(128, (3, 3), activation='relu'),\n","        MaxPooling2D(2, 2),\n","        Flatten(),\n","        Dense(512, activation='relu'),\n","        Dropout(0.5),\n","        Dense(1, activation='sigmoid')\n","    ])\n","    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","# -------------------------------\n","# Step 2: Load model weights\n","# -------------------------------\n","model = build_model()\n","weights_path = 'model_weights.h5'  # Make sure you have uploaded this file\n","from os.path import exists\n","\n","if exists(weights_path):\n","    model.load_weights(weights_path)\n","    print(\"âœ… Model weights loaded successfully!\")\n","else:\n","    print(\"âš  Model weights not found. Predictions will be random!\")\n","\n","# -------------------------------\n","# Step 3: Upload image\n","# -------------------------------\n","uploaded = files.upload()\n","image_path = list(uploaded.keys())[0]\n","print(\"Uploaded image:\", image_path)\n","\n","# -------------------------------\n","# Step 4: Preprocess image\n","# -------------------------------\n","img = cv2.imread(image_path)\n","if img is None:\n","    raise ValueError(\"Failed to read the image. Check the file type or path.\")\n","\n","img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","img = cv2.resize(img, (224, 224))\n","img = img.astype('float32') / 255.0\n","img = np.expand_dims(img, axis=0)\n","\n","# Optional: display the image\n","Image.open(image_path)\n","\n","# -------------------------------\n","# Step 5: Predict\n","# -------------------------------\n","prediction = model.predict(img)[0][0]\n","result = \"Glaucoma Detected\" if prediction > 0.5 else \"No Glaucoma\"\n","confidence = prediction if prediction > 0.5 else 1 - prediction\n","\n","print(f\"\\nðŸ”¹ Result: {result}\")\n","print(f\"ðŸ”¹ Confidence: {confidence*100:.2f}%\")"]}]}